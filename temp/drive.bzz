# We need this for 2D vectors
include "/home/ubuntu/buzz/src/include/vec2.bzz"

# Lennard-Jones parameters
TARGET     = 283.0
EPSILON    = 150.0
ROBOTS     = 100
CHARGING   = 0 

# Lennard-Jones interaction magnitude
function lj_magnitude(dist, target, epsilon) {
  return -(epsilon / dist) * ((target / dist)^4 - (target / dist)^2)
}

# Neighbor data to LJ interaction vector
function lj_vector(rid, data) {
  return math.vec2.newp(lj_magnitude(data.distance, TARGET, EPSILON), data.azimuth)
}

# Accumulator of neighbor LJ interactions
function lj_sum(rid, data, accum) {
  return math.vec2.add(data, accum)
}

# Calculates and actuates the flocking interaction
function hexagon() {
  # Calculate accumulator
  var accum = neighbors.map(lj_vector).reduce(lj_sum, math.vec2.new(0.0, 0.0))
  if(neighbors.count() > 0)
    math.vec2.scale(accum, 1.0 / neighbors.count())
  # Move according to vector
  goto(accum.x, accum.y)
}


# Executed at init time
function init() {
  # start_charging()
  # stop_charging()
  # start_processing()
  # stop_processing()
  # log("Current SOC: ", soc)
  # type: 99 efootbot, 89 base-station
  statef = hexagon
}

# Executed every time step
function step() {
  if(soc != nil)
    log("ID: ", id, " SOC: ", soc)
  
  if(type == 99){
    start_processing()
  }
  else if(type == 99){
    debug(" SOC: ", soc)
  }
  if(soc != 0 and soc > 15 and CHARGING == 0) { 
    statef() 
  }
  else if (type == 99) {
    goto(0.0, 0.0)
    start_charging()
    CHARGING = 1
    if(soc > 95){
      CHARGING = 0
      stop_charging()
    }
  }

}

# Execute at exit
function destroy() {
}

